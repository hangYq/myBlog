(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{203:function(t,e,a){t.exports=a.p+"assets/img/http-catch-1.fbcc7782.png"},204:function(t,e,a){t.exports=a.p+"assets/img/http-catch-2.ea529e60.png"},235:function(t,e,a){"use strict";a.r(e);var i=a(0),_=Object(i.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h3",{attrs:{id:"浏览器的协商缓存与强缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的协商缓存与强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的协商缓存与强缓存")]),t._v(" "),i("h4",{attrs:{id:"一、什么是浏览器缓存？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是浏览器缓存？","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、什么是浏览器缓存？")]),t._v(" "),i("pre",[i("code",[t._v("浏览器缓存是用户在本地磁盘对用户最近请求的文档进行存储，当访问者再次访问同一资源时，浏览器就可以从本地磁盘加载文档。\n")])]),t._v(" "),i("h4",{attrs:{id:"二、浏览器缓存的优点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二、浏览器缓存的优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、浏览器缓存的优点")]),t._v(" "),i("ul",[i("li",[t._v("减少冗余的数据传输，节省网费；")]),t._v(" "),i("li",[t._v("减少服务器的负担，大大提升网站的性能；")]),t._v(" "),i("li",[t._v("加快客户端加载网页的速度。")])]),t._v(" "),i("h4",{attrs:{id:"三、浏览器缓存的分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三、浏览器缓存的分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、浏览器缓存的分类")]),t._v(" "),i("p",[t._v("浏览器缓存的分类主要为两类，分别是"),i("code",[t._v("协商缓存")]),t._v("和"),i("code",[t._v("强制缓存")]),t._v("。")]),t._v(" "),i("p",[t._v("浏览器在第一次请求获取资源之后，然后根据返回的信息判断来告诉浏览器如何缓存，可能采用的是强制缓存，也可能是告诉浏览器进行协商缓存，这都是需要根据响应的"),i("code",[t._v("header")]),t._v("来决定。")]),t._v(" "),i("p",[t._v("浏览器第一次请求时：")]),t._v(" "),i("p",[t._v("如图:"),i("img",{attrs:{src:a(203),alt:"浏览器第一次请求"}})]),t._v(" "),i("p",[t._v("浏览器再次进行请求时：")]),t._v(" "),i("p",[t._v("如图:"),i("img",{attrs:{src:a(204),alt:"浏览器再次进行请求"}})]),t._v(" "),i("p",[t._v("从上图可以看出浏览器缓存包含两种类型，即"),i("code",[t._v("强缓存")]),t._v("和"),i("code",[t._v("协商缓存")]),t._v(",浏览器在第一次请求后，当再次请求时，过程如下：")]),t._v(" "),i("ul",[i("li",[t._v("浏览器在请求某一资源时，会首先获取 header 信息，判断是否命中强缓存（"),i("code",[t._v("cache-control和expires")]),t._v("），如果命中则直接从缓存的资源中读取信息，包括缓存的 header 信息，本次请求就不会与服务器进行通信；")]),t._v(" "),i("li",[t._v("如果本次请求没有命中强缓存，浏览器会发送请求到服务器，请求时会携带一些有关缓存中的 header 字段信息（"),i("code",[t._v("Last-Modified/If-Modified-Since和Etag/If-None-Match")]),t._v("），由服务器根据请求的 header 字段信息来比较是否进行协商缓存，如果命中协商缓存，则服务器返回新的响应 header 信息，但是并不放回资源内容，它会告诉浏览器可以直接从缓存中读取资源，否则返回新的资源内容。")])]),t._v(" "),i("p",[t._v("强缓存与协商缓存的比价：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("缓存分类")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("获取资源形式")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("状态码")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("是否发送请求到服务器")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("强缓存")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("从缓存获取")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("200（from cache）")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("否，直接从缓存获取")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("协商缓存")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("从缓存获取")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("304（not modified）")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("是，请求服务器，通过服务器来告知，缓存是否可用")])])])]),t._v(" "),i("h4",{attrs:{id:"四、强缓存相关的-header-字段"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#四、强缓存相关的-header-字段","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、强缓存相关的 header 字段")]),t._v(" "),i("p",[t._v("强缓存直接从缓存中获取资源而不经过服务器；与强缓存相关的 header 字段有两个：")]),t._v(" "),i("p",[t._v("1.expires，这是 http1.0 时的规范；它的值为一个绝对时间的 GMT 格式的时间字符串，如 Mon, 20 Jun 2019 10:31:12 GMT，如果发送请求的时间在 expires 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源；（一般指服务器时间）")]),t._v(" "),i("p",[t._v("2.cache-control：max-age=number，这是 http1.1 时出现的 header 信息，主要是利用该字段的 max-age 值来进行判断，它是一个相对值；资源第一次的请求时间和 Cache-Control 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control 除了该字段外，还有下面几个比较常用的设置值：")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。")])]),t._v(" "),i("li",[i("p",[t._v("no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。")])]),t._v(" "),i("li",[i("p",[t._v("public：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器。")])]),t._v(" "),i("li",[i("p",[t._v("private：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。")]),t._v(" "),i("p",[t._v("注意：")]),t._v(" "),i("p",[t._v("Cache-Control与Expires可以在服务端配置同时启用，同时启用的时候Cache-Control优先级高。")])])]),t._v(" "),i("h4",{attrs:{id:"五、协商缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#五、协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 五、协商缓存")]),t._v(" "),i("p",[t._v("协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问，这主要涉及到下面两组 header 字段，这两组搭档都是成对出现的，即第一次请求的响应头带上某个字段（Last-Modified 或者 Etag），则后续请求则会带上对应的请求字段（If-Modified-Since 或者 If-None-Match），若响应头没有 Last-Modified 或者 Etag 字段，则请求头也不会有对应的字段。")]),t._v(" "),i("h5",{attrs:{id:"_1-last-modify-if-modify-since"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-last-modify-if-modify-since","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Last-Modify/If-Modify-Since")]),t._v(" "),i("p",[t._v("浏览器第一次请求一个资源的时候，服务器返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间，例如 Last-Modify: Thu,31 Dec 2019 23:59:59 GMT。")]),t._v(" "),i("p",[t._v("当浏览器再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。")]),t._v(" "),i("p",[t._v("如果命中缓存，则返回 304，并且不会返回资源内容，并且不会返回 Last-Modify。")]),t._v(" "),i("h5",{attrs:{id:"_2-etag-if-none-match："}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-etag-if-none-match：","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. ETag/If-None-Match：")]),t._v(" "),i("p",[t._v("与 Last-Modify/If-Modify-Since 不同的是，Etag/If-None-Match 返回的是一个校验码。ETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 If-None-Match 值来判断是否命中缓存。")]),t._v(" "),i("p",[t._v("与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。")]),t._v(" "),i("h5",{attrs:{id:"_3-为什么要有-etag？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要有-etag？","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 为什么要有 Etag？")]),t._v(" "),i("p",[t._v("你可能会觉得使用 Last-Modified 已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要 Etag 呢？HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题：")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 GET；")])]),t._v(" "),i("li",[i("p",[t._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，If-Modified-Since 能检查到的粒度是 s 级的，这种修改无法判断(或者说 UNIX 记录 MTIME 只能精确到秒)；")])])]),t._v(" "),i("ul",[i("li",[i("p",[t._v("某些服务器不能精确的得到文件的最后修改时间。")]),t._v(" "),i("p",[t._v("注意：")]),t._v(" "),i("p",[t._v("Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。")])])]),t._v(" "),i("h4",{attrs:{id:"六、用户的行为对缓存的影响"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#六、用户的行为对缓存的影响","aria-hidden":"true"}},[t._v("#")]),t._v(" 六、用户的行为对缓存的影响")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("用户操作")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("Expires/Cache-Control")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("Last-Modied/Etag")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("地址栏回车")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("页面链接跳转")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("开窗口")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("前进回退")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("F5 刷新")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("Ctrl+F5 强制刷新")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("无效")])])])]),t._v(" "),i("h4",{attrs:{id:"七、实际问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#七、实际问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 七、实际问题")]),t._v(" "),i("p",[t._v("代码更新到线上后用户浏览器不能自行更新，我们不能要求客户在系统更新后都进行一次缓存清理的操作，我们该如何做？")]),t._v(" "),i("p",[t._v("在资源请求的 URL 中增加一个参数，比如：js/index.js?ver=0.0.1。这个参数是一个版本号，每一次部署的时候变更一下，当这个参数变化的时候，强缓存都会失效并重新加载。这样一来，静态资源，部署以后就需要重新加载。这样就比较完美的解决了问题。")])])},[],!1,null,null,null);e.default=_.exports}}]);